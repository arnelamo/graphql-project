{"version":3,"sources":["store/Reducer.js","store/Store.js","queries/queries.js","components/BookDetails.js","store/actionCreators.js","components/BookList.js","components/AddBook.js","components/Console.js","utils/helpers.js","App.js","index.js"],"names":["Reducer","state","action","type","currentBook","payload","operation","initialState","bookId","name","genre","authorId","Context","createContext","Store","children","useReducer","dispatch","Provider","value","getBooksQuery","gql","getAuthorsQuery","addBookMutation","getBookQuery","deleteBookMutation","BookDetails","useState","removeBook","setRemoveBook","useContext","useLazyQuery","variables","id","getBook","loading","error","data","useMutation","mutate","useEffect","getBookActions","message","book","author","list","books","map","key","onClick","deleteBookActions","refetchQueries","query","renderContent","BookList","selectedBookId","setSelectedBookId","useQuery","console","log","updatedList","useStyles","makeStyles","theme","root","margin","spacing","width","AuthorsList","classes","setBook","disabled","handleChange","e","target","authorsList","authors","MenuItem","className","onSubmit","preventDefault","addBookActions","TextField","variant","size","label","onChange","select","Console","string","queries","addBook","deleteBook","findString","renderOperation","client","ApolloClient","uri","App","AddBook","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83faf294.chunk.js","sourcesContent":["\nconst Reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_BOOK':\n      return {\n        ...state,\n        currentBook: action.payload\n      }\n    case 'GET_BOOK':\n      return {\n        ...state,\n        currentBook: action.payload\n      }\n    case 'DELETE_BOOK':\n      return {\n        ...state,\n        currentBook: action.payload\n      }\n    case 'ADD_OPERATION':\n      return {\n        ...state,\n        operation: action.payload\n      }\n    default:\n      return state\n  }\n}\n\nexport default Reducer","import React, { createContext, useReducer } from 'react'\nimport Reducer from './Reducer'\n\nconst initialState = {\n  currentBook: {\n    bookId: '',\n    name: '',\n    genre: '',\n    authorId: ''\n  },\n  operation: ''\n}\n\nconst Store = ({ children }) => {\n  const [state, dispatch] = useReducer(Reducer, initialState)\n\n  return (\n    <Context.Provider value={ [state, dispatch] } >\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport const Context = createContext(initialState)\nexport default Store","import  gql  from 'graphql-tag'\n\nconst getBooksQuery = gql`\n{\n  books {\n    name\n    id\n  }\n}\n`\n\nconst getAuthorsQuery = gql`\n{\n  authors {\n    name\n    id\n  }\n}\n`\n\nconst addBookMutation = gql`\nmutation($name: String!, $genre: String!, $authorId: ID!) {\n  addBook(name: $name, genre: $genre, authorId: $authorId) {\n    name\n    id\n  }\n}\n`\n\nconst getBookQuery = gql`\nquery($id: ID!) {\n  book(id: $id) {\n    id\n    name\n    genre\n    author {\n      id\n      name\n      age\n      books{\n        id\n        name\n      }\n    }\n  }\n}\n`\n\nconst deleteBookMutation = gql`\n  mutation ($id: ID!){\n    deleteBook(id: $id){\n      name\n      id\n    }\n  }\n`\n\nexport {\n  getBooksQuery,\n  getAuthorsQuery,\n  addBookMutation,\n  getBookQuery,\n  deleteBookMutation\n}","import React, { useState, useEffect, useContext } from 'react'\nimport { Context } from '../store/Store'\n\nimport { useLazyQuery, useMutation } from '@apollo/react-hooks'\nimport { getBookQuery, getBooksQuery, deleteBookMutation } from '../queries/queries'\nimport { getBookActions, deleteBookActions } from '../store/actionCreators'\n\nconst BookDetails = ({ bookId }) => {\n  \n  const [removeBook, setRemoveBook] = useState(false)\n  const [state, dispatch] = useContext(Context)\n  const [getBook, { loading, error, data }] = useLazyQuery(getBookQuery, {\n    variables: { id: bookId }\n  })\n  const [ mutate ] = useMutation(deleteBookMutation)\n\n  useEffect(() => {\n    bookId && getBook({ variables: { id: bookId }})\n    bookId && getBookActions(bookId, dispatch)\n    setRemoveBook(false)\n  }, [setRemoveBook, bookId, getBook])\n\n  if (loading) return 'Loading...';\n  if (error) return `BookList Error! ${error.message}`\n\n  const handleDelete = (id) => {\n    setRemoveBook(true)\n    deleteBookActions(id, dispatch)\n    mutate({\n      variables: {\n        id: id \n      },\n      refetchQueries: [{ query: getBooksQuery }]\n    })\n  }\n  \n  const renderContent = () => {\n    if (data && !removeBook) {\n\n      const { book } = data\n      const { author } = book\n\n      const list = author.books.map(book => {\n        return <li key={book.id}>{book.name}</li>\n      })\n\n      return (\n        <>\n          <h2>Title: \"{book.name}\"</h2>\n          <p><i>{book.genre}</i></p>\n          <p>Author: {author.name}</p>\n          <p>All books by this author:</p>\n          <ul>\n            {list}\n          </ul>\n          <button id=\"delete-book-button\" onClick={() => handleDelete(book.id)}>DELETE BOOK</button>\n        </>\n      )\n    } else {\n      return <h2>No book selected</h2>\n    }\n  }\n\n  return (\n    <div id=\"right-side\">\n      <div id=\"book-details\">\n        {renderContent()}\n      </div>\n    </div>\n  )\n}\n\nexport default BookDetails","export const addBookActions = (book, dispatch) => {\n  dispatch({ \n    type: 'ADD_BOOK',\n    payload: {\n      name: book.name,\n      genre: book.genre,\n      authorId: book.authorId\n    }\n  })\n  dispatch({\n    type: 'ADD_OPERATION',\n    payload: 'addBookMutation'\n  })\n}\n\nexport const getBookActions = (id, dispatch) => {\n  dispatch({\n    type: 'GET_BOOK',\n    payload: { bookId: id }\n  })\n  dispatch({\n    type: 'ADD_OPERATION',\n    payload: 'getBookQuery'\n  })\n}\n\nexport const deleteBookActions = (id, dispatch) => {\n  dispatch({\n    type: 'DELETE_BOOK',\n    payload: { bookId: id }\n  })\n  dispatch({\n    type: 'ADD_OPERATION',\n    payload: 'deleteBookMutation'\n  })\n}","import React, { useState, useContext } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { getBooksQuery } from '../queries/queries'\nimport { Context } from '../store/Store'\n\nimport BookDetails from '../components/BookDetails'\n\nconst BookList = () => {\n  const [selectedBookId, setSelectedBookId] = useState(null)\n  const [state, dispatch] = useContext(Context)\n  const { loading, error, data } = useQuery(getBooksQuery)\n\n  if (loading) return 'Loading...';\n  if (error) return `BookList Error! ${error.message}`\n\nconsole.log('BookList state', state)\n\n  const updatedList = data.books.map(book => {\n  return <li key={book.id} onClick={() => setSelectedBookId(book.id)}>{book.name}</li>\n  })\n\n  return (\n    <div>\n      <ul id=\"book-list\">\n        {updatedList}\n      </ul>\n      <BookDetails bookId={selectedBookId}/>\n    </div>\n  )\n}\n\nexport default BookList","import React, { useState, useContext } from 'react'\nimport { Context } from '../store/Store'\n\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { getAuthorsQuery, addBookMutation, getBooksQuery } from '../queries/queries'\nimport { addBookActions } from '../store/actionCreators'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField'\nimport MenuItem from '@material-ui/core/MenuItem'\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: 250,\n    },\n  },\n}));\n\nconst AuthorsList = () => {\n  const classes = useStyles();\n  const [state, dispatch] = useContext(Context)\n\n  const [book, setBook] = useState({\n    name: '',\n    genre: '',\n    authorId: ''\n  })\n  \n  // QUERIES + MUTATIONS\n  const { loading, error, data } = useQuery(getAuthorsQuery)\n  const [ mutate ] = useMutation(addBookMutation)\n  \n  if (loading) return <option disabled>'Loading...'</option>\n  if (error) return `AddBook Error! ${error.message}`\n  \n  const handleChange = (e) => {\n    setBook({...book, [e.target.name]: e.target.value})\n  }\n  \nconsole.log('AddBook State', state)\nconsole.log('AddBook local State', book)\n\n  const submitForm = (e) => {\n    e.preventDefault()\n    // Using our custom actioncreator to update state\n    addBookActions(book, dispatch)\n    mutate({\n      // The variables option is an object that contains all of the variables we want to pass to our GraphQL query\n      variables: {\n        name: book.name,\n        genre: book.genre,\n        authorId: book.authorId\n      },\n      // use this to refetch and update the list\n      refetchQueries: [{ query: getBooksQuery }]\n    })\n    // refetch() to update list\n    setBook({\n      name: '',\n      genre: '',\n      authorId: ''\n    })\n  }\n\n  const authorsList = data.authors.map(author => {\n    return <MenuItem key={author.id} value={author.id}>{author.name}</MenuItem>\n  })\n\n  return (\n    <form className={classes.root} onSubmit={submitForm}>\n      <div id=\"form-fields\">\n        <TextField\n          variant=\"outlined\"\n          size=\"small\"\n          label=\"Title\"\n          id=\"standard-size-small\" \n          name=\"name\"\n          onChange={handleChange}\n          value={book.name}\n        />\n        <TextField\n          variant=\"outlined\"\n          size=\"small\"\n          label=\"Genre\"\n          id=\"standard-size-small\" \n          name=\"genre\"\n          onChange={handleChange}\n          value={book.genre}\n        />\n        <TextField\n          select\n          variant=\"outlined\"\n          size=\"small\"\n          label=\"Author\"\n          id=\"standard-size-small\" \n          name=\"authorId\"\n          onChange={handleChange}\n          value={book.authorId}\n        >\n          {authorsList}\n        </TextField>\n      </div>\n      <button>ADD BOOK</button>\n    </form>\n  )\n}\n\nexport default AuthorsList","import React, { useContext } from 'react'\nimport { Context } from '../store/Store'\nimport { findString } from '../utils/helpers'\n\n\n\nconst Console = () => {\n  const [state] = useContext(Context)\n  const {currentBook, operation} = state\nconsole.log('Console state', state)\n  const renderOperation = () => {\n    \n    if (operation) {\n      const string = findString(currentBook, operation)\n      return (\n        <div>\n          <pre>{string}</pre>\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n\n  return (\n    <div id=\"console-data\">\n      <h2>GraphQL operation executed:</h2>\n      {renderOperation()}\n    </div>\n  )\n}\n\nexport default Console","export const getLinesAndSpaces = (part) => {\n  const regEx = /02/g\n  const number = part.match(regEx).length * 2\n  const line = part.replace(regEx, \"\")\n  let spaces = \"\"\n  for (let i=0; i < number; i++) {\n    spaces = spaces.concat(\" \")\n  }\n  return [line, spaces]\n}\n\nexport const findString = (currentBook, operation) => {\n  const queries = {\n  addBook: `\n  mutation {\n    addBook(name: ${currentBook.name}, genre: ${currentBook.genre}, authorId: ${currentBook.authorId}) {\n      name\n      id\n    }\n  }\n  `,\n  getBook: `\n  query {\n    book(id: ${currentBook.bookId}) {\n      id\n      name\n      genre\n      author {\n        id\n        name\n        age\n        books{\n          id\n          name\n        }\n      }\n    }\n  }\n  `,\n  deleteBook: `\n  mutation {\n    deleteBook(id: ${currentBook.bookId}){\n      name\n      id\n    }\n  }\n`\n}\n\n  switch (operation) {\n    case 'addBookMutation': return queries.addBook\n    case 'getBookQuery': return queries.getBook\n    case 'deleteBookMutation': return queries.deleteBook\n    default:\n      return null\n  } \n}","import React from 'react';\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport Store  from './store/Store'\n\n/* Components */\nimport BookList from './components/BookList'\nimport AddBook from './components/AddBook'\nimport Console from './components/Console'\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n})\n\nconst  App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Store>\n        <div id=\"main\">\n          <h1>GraphQL Playground</h1>\n          <BookList/>\n          <AddBook/> \n        </div>\n        <div id=\"console\">\n        <Console />\n      </div>\n      </Store>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}